{"version":3,"sources":["GridCell.js","Grid.js","Header.js","App.js","index.js"],"names":["GridCell","cell","cellColor","className","style","backgroundColor","Grid","grid","handlePlaceToken","console","log","map","col","c","onClick","row","r","Header","player","msg","playerOneTurn","gameActive","gameWinner","color","App","useState","setGrid","setPlayerOneTurn","setGameActive","setGameWinner","useEffect","i","column","Array","fill","push","createGrid","selectedIndex","gridArray","playerValue","length","player_one_count","player_two_count","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAoBeA,MAlBf,YAA6B,IAATC,EAAQ,EAARA,KAGdC,EAAY,GAUhB,MARa,MAATD,IACFC,EAAY,SAGD,MAATD,IACFC,EAAY,QAIZ,qBAAKC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBH,MCO1CI,MApBf,YAA2C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,iBAGpB,OAFAC,QAAQC,IAAIH,GAGV,qBAAKJ,UAAU,iBAAf,SACGI,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,qBAEEV,UAAU,cACVW,QAAS,kBAAMN,EAAiBK,IAHlC,SAKGD,EAAID,KAAI,SAACI,EAAKC,GAAN,OACP,cAAC,EAAD,CAAkBf,KAAMc,GAATC,OALZH,SCoBAI,MA5Bf,YAA4D,IAGtDC,EAAQC,EAHIC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAoB3C,OAfID,GACFH,EAASE,EAAgB,IAAM,IAE/BD,EACE,+BACE,uBAAMf,MAAO,CAAEmB,MAAOH,EAAgB,QAAU,QAAhD,oBACUF,EADV,QAEQ,IAHV,QAIQ,QAIVC,EAAM,yCAAYG,EAAZ,qBAIN,gCACE,0CACCH,MCkGQK,MAtHf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA0CD,oBAAS,GAAnD,mBAAOL,EAAP,KAAsBO,EAAtB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOJ,EAAP,KAAmBO,EAAnB,KACA,EAAoCH,mBAAS,MAA7C,mBAAOH,EAAP,KAAmBO,EAAnB,KAsGA,OAzFAC,qBAAU,YAVV,WAGE,IAFA,IAAIvB,EAAO,GAEFwB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAASC,MAAM,GAAGC,KAAK,GAC3B3B,EAAK4B,KAAKH,GAEZN,EAAQnB,GAIR6B,KACC,IAwFD,sBAAKjC,UAAU,MAAf,UACE,cAAC,EAAD,CACEiB,cAAeA,EACfC,WAAYA,EACZC,WAAYA,IAEd,cAAC,EAAD,CAAMf,KAAMA,EAAMC,iBAxFtB,SAA0BI,GAExB,GAAIS,EAAY,CACd,IASIgB,EATEC,EAAS,YAAO/B,GAClBgC,EAAc,GAClB9B,QAAQC,IAAI,SAAU4B,GAEpBC,EADEnB,EACY,IAEA,IAKhB,IAAK,IAAIW,EAAIO,EAAU1B,GAAK4B,OAAS,EAAGT,GAAK,EAAGA,IAC9C,GAA0B,IAAtBO,EAAU1B,GAAKmB,GAAU,CAE3BM,EAAgBN,EAChB,MAKyB,kBAAlBM,IACTC,EAAU1B,GAAKyB,GAAiBE,EAChCb,EAAQY,GAcZ7B,QAAQC,IAAI,gBAEZH,EAAKI,KAAI,SAACC,GACR,IAAI6B,EAAmB,EACnBC,EAAmB,EAEvB9B,EAAID,KAAI,SAACI,EAAKC,GAGA,MAARD,EACF0B,IAEAA,EAAmB,EAIT,MAAR1B,EACF2B,IAEAA,EAAmB,KAKnBD,EAAmB,IACrBhC,QAAQC,IAAI,kBACZmB,EAAc,GACdD,GAAc,IAGZc,EAAmB,IACrBjC,QAAQC,IAAI,kBACZmB,EAAc,GAEdD,GAAc,OA5ElBD,GAAkBP,YCtBtBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.56f74a9f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction GridCell({ cell }) {\n  //   const [cellColor, setCellColor] = useState(\"\");\n  //   console.log(cell);\n  let cellColor = \"\";\n\n  if (cell === \"1\") {\n    cellColor = \"green\";\n  }\n\n  if (cell === \"2\") {\n    cellColor = \"blue\";\n  }\n\n  return (\n    <div className=\"grid-cell\" style={{ backgroundColor: cellColor }}></div>\n  );\n}\n\nexport default GridCell;\n","import React from \"react\";\nimport GridCell from \"./GridCell\";\n\nfunction Grid({ grid, handlePlaceToken }) {\n  console.log(grid);\n\n  return (\n    <div className=\"grid-container\">\n      {grid.map((col, c) => (\n        <div\n          key={c}\n          className=\"grid-column\"\n          onClick={() => handlePlaceToken(c)}\n        >\n          {col.map((row, r) => (\n            <GridCell key={r} cell={row} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React from \"react\";\n\nfunction Header({ playerOneTurn, gameActive, gameWinner }) {\n  // const [gameStatus, setGameStatus] = useState('')\n\n  let player, msg;\n\n  if (gameActive) {\n    player = playerOneTurn ? \"1\" : \"2\";\n\n    msg = (\n      <h3>\n        <span style={{ color: playerOneTurn ? \"green\" : \"blue\" }}>\n          Player {player}'s\n        </span>{\" \"}\n        turn!{\" \"}\n      </h3>\n    );\n  } else {\n    msg = <h3>Player {gameWinner} is the winner!</h3>;\n  }\n\n  return (\n    <div>\n      <h1>Connect4</h1>\n      {msg}\n    </div>\n  );\n}\n\nexport default Header;\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./Grid\";\nimport Header from \"./Header\";\n\nfunction App() {\n  const [grid, setGrid] = useState([]);\n  const [playerOneTurn, setPlayerOneTurn] = useState(true);\n  const [gameActive, setGameActive] = useState(true);\n  const [gameWinner, setGameWinner] = useState(null);\n\n  // Generate a grid 7x7 of empty arrays\n  function createGrid() {\n    let grid = [];\n\n    for (let i = 0; i < 7; i++) {\n      let column = Array(7).fill(0);\n      grid.push(column);\n    }\n    setGrid(grid);\n  }\n\n  useEffect(() => {\n    createGrid();\n  }, []);\n\n  function changeTurns() {\n    setPlayerOneTurn(!playerOneTurn);\n  }\n\n  function handlePlaceToken(col) {\n    // If game is active, set token\n    if (gameActive) {\n      const gridArray = [...grid];\n      let playerValue = \"\";\n      console.log(\"copy: \", gridArray);\n      if (playerOneTurn) {\n        playerValue = \"1\";\n      } else {\n        playerValue = \"2\";\n      }\n\n      let selectedIndex;\n      // Loop through column array and insert token at first available slot if there are one\n      for (let i = gridArray[col].length - 1; i >= 0; i--) {\n        if (gridArray[col][i] === 0) {\n          // gridArray[col][i] = playerTurn;\n          selectedIndex = i;\n          break;\n        }\n      }\n\n      // Check if selected index exist\n      if (typeof selectedIndex === \"number\") {\n        gridArray[col][selectedIndex] = playerValue;\n        setGrid(gridArray);\n\n        // Check winner\n        checkColumnMatch();\n\n        // Change turns\n        changeTurns();\n      }\n    }\n  }\n\n  // Check winning conditions\n  // column win = 4 consecutive blocks in the same column\n  function checkColumnMatch() {\n    console.log(\"checking win\");\n\n    grid.map((col) => {\n      let player_one_count = 0;\n      let player_two_count = 0;\n\n      col.map((row, r) => {\n        // console.log(r);\n        // Check player one\n        if (row === \"1\") {\n          player_one_count++;\n        } else {\n          player_one_count = 0;\n        }\n\n        // Check player two\n        if (row === \"2\") {\n          player_two_count++;\n        } else {\n          player_two_count = 0;\n        }\n      });\n\n      // Check win\n      if (player_one_count > 3) {\n        console.log(\"player one win\");\n        setGameWinner(1);\n        setGameActive(false);\n      }\n\n      if (player_two_count > 3) {\n        console.log(\"player two win\");\n        setGameWinner(2);\n\n        setGameActive(false);\n      }\n    });\n  }\n\n  // Row win = 4 consecutive blocks in the same row\n  function checkRowMatch() {}\n\n  return (\n    <div className=\"App\">\n      <Header\n        playerOneTurn={playerOneTurn}\n        gameActive={gameActive}\n        gameWinner={gameWinner}\n      />\n      <Grid grid={grid} handlePlaceToken={handlePlaceToken} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}